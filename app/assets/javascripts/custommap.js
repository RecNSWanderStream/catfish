
/*Create marker points 2D array to hold name, latitude, and longitude.
Pulled by Google maps to create markers and infowindow content. Information
gathered from html tables generated by search.*/

function initialize_page(){

var markerpoints= [];

$('.mappoint').each(function(){
  var name= $(this).attr('data-name')
  var lat= $(this).attr('data-lat');
  var lng= $(this).attr('data-lng');
  var id= $(this).attr('id');
  var zoom= $(this).attr('data-zoom');
  markerpoints.push([name, lat, lng, id, zoom]);
  });





//Function initializing the map
function initialize() {
  var myLatlng = new google.maps.LatLng(45.000, -63.000);
  var mapOptions = {
    zoom: 7,
    center: myLatlng,
    scrollwheel: false
  };



//Create new map
var map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);


  

 //Geolocation Prompt
  if(navigator.geolocation) {
    browserSupportFlag = true;
    navigator.geolocation.getCurrentPosition(function(position) {
      initialLocation = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
      map.setCenter(initialLocation);
    }, function() {
      handleNoGeolocation(browserSupportFlag);
    });
  } 
 
//Loops through all of markerpoints array
for(var i=0; i<markerpoints.length; i++){

  

//Get latitude and longitude for each marker
  var markerLatlng= new google.maps.LatLng(markerpoints[i][1], markerpoints[i][2]);



//Create new marker for each iteration
  var marker = new google.maps.Marker({
      position: markerLatlng,
      map: map
    });
  
  


//Creates an inforwindow for each iteration of the loop, setting content and open function
  var infowindow = new google.maps.InfoWindow();
    google.maps.event.addListener(marker, 'mouseover', (function(marker, i) {
      return function(){
        infowindow.setContent('<a href="../assets/'+ markerpoints[i][3] +'">'+markerpoints[i][0]+'</a>');
        infowindow.open(map, marker);
        $('#' + (markerpoints[i][3])).mouseover(function(){
       google.maps.event.trigger(marker, 'mouseover');});
      }

    })(marker, i));

  
  //Function to prvent multiple windows
  google.maps.event.addListener(marker, 'mouseout', (function(marker, i) {
      return function(){
        infowindow.close();}}));

console.log(markerpoints[0][4]);

if(markerpoints.length < 2 && markerpoints[0][4]=="true"){
    map.setCenter(new google.maps.LatLng(markerpoints[0][1], markerpoints[0][2]));
    map.setZoom(10);
}
  
}

}



//Launch map
google.maps.event.addDomListener(window, 'load', initialize);


/*The below will append the icon values to both search fields on the landing page
  providing a clickable search rather than typin*/
$('.activity-icons ul li a').click(function(activity_click){
    activity_click.preventDefault();
    var content = $(this).attr('title');
    
    if($('.equation-results-home input').val()===''){
      $('.equation-results-home input').val(content);
    }else{
      $('.equation-results-home input').val($('.equation-results-home input').val() +"+"+content);
    }

    if($('#q').val()===''){
      $('#q').val(content);
    }else{
      $('#q').val($('#q').val() +"+"+content);
    }
});

//Submits the search form at the top when the button below the map is clicked
$('.col-lg-2 a').click(function(activity_search_click){
    activity_search_click.preventDefault();
    $('form').submit();
});



};

$(document).on("page:load", initialize_page);
$(document).ready(initialize_page);
//End